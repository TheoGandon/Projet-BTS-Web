<?php

namespace App\Controller;

use App\Repository\ClientRepository;
use PHPUnit\Util\Exception;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use function PHPUnit\Framework\throwException;

class LoginController extends AbstractController
{
    #[Route('/api/login', name: 'app_login')]
    public function login(ClientRepository $clientRepository, Request $request){
        $method = $_SERVER['REQUEST_METHOD'];
        $session  = $request->getSession();
        if($method == "POST"){
            try {

                if(isset($_POST['email'])){
                    $input_email = $_POST['email'];
                } elseif (isset(json_decode(file_get_contents('php://input'), true)['email'])){
                    $input_email = json_decode(file_get_contents('php://input'), true)['email'];
                }else return new Response('email not defined', Response::HTTP_BAD_REQUEST);
                if(isset($_POST['password'])){
                    $input_password = $_POST['password'];
                } elseif (isset(json_decode(file_get_contents('php://input'), true)['password'])){
                    $input_password = json_decode(file_get_contents('php://input'), true)['password'];
                }else return new Response('password not defined', Response::HTTP_BAD_REQUEST);

                $clients = $clientRepository->findLoginClient($input_email);

                $stored_password = $clients[0]["client_password"];

                if (password_verify($input_password, $stored_password)) {
                    $loggedin = $session->get("loginsession", []);
                    $loggedin["id"] = $clients[0]["id"];
                    $loggedin["first_name"] = $clients[0]["client_first_name"];
                    $loggedin["last_name"] = $clients[0]["client_last_name"];
                    $loggedin["email"] = $clients[0]["client_email"];
                    $session->set("loginsession", $loggedin);
                    return new Response('User successfully connected', Response::HTTP_OK);

                }

            } catch (\Exception $e){
                error_log($e->getMessage());
            }
        }
        return new Response("Unable to login !", Response::HTTP_BAD_REQUEST);
    }

    #[Route('/api/logout', name: 'app_logout')]
    public function logout(ClientRepository $clientRepository, Request $request){
        $session = $request->getSession();
        $loginsession = $session->get("loginsession");
        if(!is_null($loginsession)){
            $session->clear();
            return new Response('Session Cleared Successfully', Response::HTTP_OK);
        } else {
            return new Response('No session to clear', Response::HTTP_BAD_REQUEST);
        }
    }
}

